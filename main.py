from TimeParser import TimeParser
import config
import telebot
import db
import datetime
from telebot import types

bot = telebot.TeleBot(config.TOKEN)
parser = TimeParser()

# –¢–µ—Å—Ç–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã –ø–∞—Ä—Å–µ—Ä–∞
# print(parser.parse_raw_date("2023/12/31 23:59"))
# print(parser.input_word_and_time("–∑–∞–≤—Ç—Ä–∞", "15:30"))
# print(parser.input_word("–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"))
# print(parser.parse_string("—Å–µ–≥–æ–¥–Ω—è –≤ 14:00"))
# print(parser.parse("2023/12/31 23:59 –ù–æ–≤—ã–π –≥–æ–¥"))
# print(parser.parse(""))

print(parser.parse("2023/12/31 23:59 –ù–æ–≤—ã–π –≥–æ–¥"))


@bot.message_handler(commands=['start'])
def start(message):
    db.create_table()

    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_add_note = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
    button_delete_note = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
    button_show_notes = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫')
    button_clear_all = types.KeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë')
    keyboard.add(button_add_note, button_delete_note, button_show_notes, button_clear_all)

    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                     reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
def add_note_request(message):
    msg = bot.send_message(message.chat.id,
                           '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:')
    bot.register_next_step_handler(msg, save_note)


def save_note(message):
    try:
        db.add_note(message, datetime.datetime.now())
        bot.send_message(message.chat.id, '‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
    except Exception as e:
        bot.send_message(message.chat.id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}')


@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
def delete_note_request(message):
    notes = db.get_user_notes(str(message.chat.id))

    if not notes:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.')
        return

    keyboard = types.InlineKeyboardMarkup()
    for note in notes:
        button = types.InlineKeyboardButton(
            text=f"{note[1]} ({note[2]})",
            callback_data=f'delete_{note[0]}')
        keyboard.add(button)

    bot.send_message(message.chat.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_note_callback(call):
    note_id = call.data.split('_')[1]
    db.delete_note(note_id)
    bot.answer_callback_query(call.id, 'üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!')
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫')
def list_notes(message):
    notes = db.get_user_notes(str(message.chat.id))

    if not notes:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.')
        return

    notes_list = '\n\n'.join([f"üìå {note[1]}\n‚è∞ {note[2]}" for note in notes])
    bot.send_message(message.chat.id, f'üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n{notes_list}')


@bot.message_handler(func=lambda message: message.text == '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë')
def clear_all_notes_handler(message):
    keyboard = types.InlineKeyboardMarkup()
    confirm_button = types.InlineKeyboardButton(
        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë",
        callback_data='confirm_clear')
    cancel_button = types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data='cancel_clear')
    keyboard.add(confirm_button, cancel_button)

    bot.send_message(message.chat.id,
                     "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏?",
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'confirm_clear')
def confirm_clear_callback(call):
    deleted_count = db.delete_all_user_notes(str(call.message.chat.id))
    bot.answer_callback_query(call.id, f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–º–µ—Ç–æ–∫!")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, f"–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ ({deleted_count}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_clear')
def cancel_clear_callback(call):
    bot.answer_callback_query(call.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    bot.send_message(message.chat.id,
                     "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")


if __name__ == '__main__':
    bot.polling(none_stop=True)