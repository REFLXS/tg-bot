from TimeParser import TimeParser
import config
import telebot
import db
from telebot import types

bot = telebot.TeleBot(config.TOKEN)
parser = TimeParser()

print(parser.parse("2023/12/31 23:59 –ù–æ–≤—ã–π –≥–æ–¥"))
temp_notes = {}


@bot.message_handler(commands=['start'])
def start(message):
    db.create_table()
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    button_add_note = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
    button_delete_note = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
    button_show_notes = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫')
    button_clear_all = types.KeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë')
    button_done_notes = types.KeyboardButton('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ')
    keyboard.add(button_add_note, button_delete_note, button_show_notes, button_clear_all, button_done_notes)
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                     reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
def add_note_request(message):
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:')
    bot.register_next_step_handler(msg, get_note_date)


def get_note_date(message):
    temp_notes[message.chat.id] = {
        'user_id': str(message.chat.id),
        'text': message.text
    }
    msg = bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–º–µ—Ç–∫–∏:')
    bot.register_next_step_handler(msg, save_note_with_date)


def save_note_with_date(message):
    try:
        chat_id = message.chat.id
        if chat_id not in temp_notes:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")

        user_id = temp_notes[chat_id]['user_id']
        note_text = temp_notes[chat_id]['text']
        date_str = message.text
        try:
            if "-" in date_str:
                day, month, year = date_str.split("-")
                parsed_date = f"{year}-{month}-{day} 00:00:00"
            elif "/" in date_str:
                day, month, year = date_str.split("/")
                parsed_date = f"{year}-{month}-{day} 00:00:00"
            else:
                parsed_date = parser.parse(date_str)
                if not parsed_date:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É")
        except Exception as e:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 03-02-2004). –û—à–∏–±–∫–∞: {str(e)}")

        db.add_note(user_id, note_text, parsed_date)
        del temp_notes[chat_id]

        bot.send_message(chat_id, f'‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ {parsed_date}!')
    except Exception as e:
        error_msg = f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"'
        bot.send_message(message.chat.id, error_msg)
        if message.chat.id in temp_notes:
            del temp_notes[message.chat.id]


@bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
def delete_note_request(message):
    notes = db.get_user_notes(str(message.chat.id))

    if not notes:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.')
        return

    keyboard = types.InlineKeyboardMarkup()
    for note in notes:
        button = types.InlineKeyboardButton(
            text=f"{note[1]} ({note[2]})",
            callback_data=f'delete_{note[0]}')
        keyboard.add(button)

    bot.send_message(message.chat.id,
                     '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_note_callback(call):
    note_id = call.data.split('_')[1]
    db.delete_note(note_id)
    bot.answer_callback_query(call.id, 'üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!')
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('done_'))
def done_note_callback(call):
    note_id = call.data.split('_')[1]
    db.mark_note_completed(note_id)
    bot.answer_callback_query(call.id, '‚úÖ –ó–∞–º–µ—Ç–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!')
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫')
def list_notes(message):
    notes = db.get_user_notes(str(message.chat.id))

    if not notes:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.')
        return

    for note in notes:
        note_id, text, date = note
        keyboard = types.InlineKeyboardMarkup()
        btn_done = types.InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=f'done_{note_id}')
        btn_delete = types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{note_id}')
        keyboard.add(btn_done, btn_delete)

        bot.send_message(
            message.chat.id,
            f"üìå {text}\n‚è∞ {date}",
            reply_markup=keyboard
        )


@bot.message_handler(func=lambda message: message.text == '–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë')
def clear_all_notes_handler(message):
    keyboard = types.InlineKeyboardMarkup()
    confirm_button = types.InlineKeyboardButton(
        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë",
        callback_data='confirm_clear')
    cancel_button = types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data='cancel_clear')
    keyboard.add(confirm_button, cancel_button)

    bot.send_message(message.chat.id,
                     "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏?",
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'confirm_clear')
def confirm_clear_callback(call):
    deleted_count = db.delete_all_user_notes(str(call.message.chat.id))
    bot.answer_callback_query(call.id, f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–º–µ—Ç–æ–∫!")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, f"–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ ({deleted_count}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_clear')
def cancel_clear_callback(call):
    bot.answer_callback_query(call.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.message_handler(func=lambda message: message.text == '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ')
def list_completed_notes(message):
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT note_text, note_end_date FROM notes WHERE user_id = ? AND completed = 1 ORDER BY '
                   'note_end_date', (str(message.chat.id),))
    notes = cursor.fetchall()
    cursor.close()
    conn.close()

    if not notes:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.')
        return

    notes_list = '\n\n'.join([f"‚úÖ {text}\n‚è∞ {date}" for text, date in notes])
    bot.send_message(message.chat.id, f'üìã –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:\n\n{notes_list}')


@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    bot.send_message(message.chat.id,
                     "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")


bot.remove_webhook()
bot.polling()
